module mul1;

input m1done = {<2,2;6,7>};
output m1prech = {true,<0,0>};

input start = {<1,2>}; 
input EndP = {<0,2>};
input A1M = {<2,2;1,3>};
input A2M = {<2,2;1,3>};
output M1A = {<0,0>};
input M2A2 = {<2,2;6,7>};
input done = {<0,0>};
input C = {<0,0>};

process alu1;
    *[ [start]; A1M+;   
	[ M1A -> A1M-; [~M1A]; A1M+; *  
	| ~start -> A1M-
	]
     ]
endprocess	

process alu2;
    *[ [start]; 
	[ true -> A2M+; [M2A2 & M1A]; A2M-;
	    [ true -> [~M2A2 & ~M1A]; A2M+; [M2A2 & M1A]; A2M-; *
	    | true -> [~M2A2 & ~M1A]; EndP+
	    ]
        | true -> EndP+
	]; [~start]; EndP-
     ]
endprocess

process mul1;
    *[ [A1M & A2M & ~m1done]; m1prech-; [m1done]; (M1A+ || m1prech+ );  
	[~A1M & ~m1done]; m1prech-; [~A2M & m1done]; (M1A- || m1prech+) ]
endprocess

process mul2;
    *[ [A1M & A2M]; M2A2+; [~A1M & ~A2M]; M2A2- ]
endprocess

process celem;
    *[ [EndP & A1M]; done+; [~EndP & ~A1M]; done- ]
endprocess

process env;
    *[ start+; [done]; start-; [~done] ]
endprocess

process m1;
    *[ [~m1prech]; m1done+; [m1prech]; m1done- ]
endprocess
endmodule
