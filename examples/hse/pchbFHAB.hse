/* pre-charge half buffer Funky Half Adder - Blocking */
/* Blocking - the outputs only change when Sign1 is on */
/* Funky - A is treated as if it were inverted when doing the math */
/* ~A | A + B = S + Carry */
/* ---------------------- */
/*  1 | 0   0 = 1   0     */
/*  1 | 0   1 = 0   1     */
/*  0 | 1   0 = 0   0     */
/*  0 | 1   1 = 1   0     */

module pchbFHAB;

delay onegate = <90,110>;
delay twogate = <180,220>;
delay envdelay = <180,inf;180,220>;

input A0 = {envdelay};
input A1 = {envdelay};
input B0 = {envdelay};
input B1 = {envdelay};

input Sign0 = {envdelay};
input Sign1 = {envdelay};

input Ce = {envdelay};
output C0 = {onegate};
output C1 = {onegate};
input Se = {envdelay};
output S0 = {onegate};
output S1 = {onegate};
output en = {true,onegate};
input x = {<0,0>};
input y = {<0,0>};

process main;
*[(([Se]; [ A0 & B0 & Sign1 -> S1+
          | A0 & B1 & Sign1 -> S0+
          | A1 & B0 & Sign1 -> S0+
          | A1 & B1 & Sign1 -> S1+
	  | Sign0 -> x+
          ])||  
   ([Ce]; [ A0 & B0 & Sign1 -> C0+
          | A0 & B1 & Sign1 -> C1+
          | A1 & B0 & Sign1 -> C0+
          | A1 & B1 & Sign1 -> C0+
	  | Sign0 -> y+
          ])); [A0 | A1]; [B0 | B1]; [Sign0 | Sign1]; en-;
	  [ Sign1 -> (([~Se]; [ S0 -> S0- | S1 -> S1-]) ||
                     ([~Ce]; [ C0 -> C0- | C1 -> C1-]))
          | Sign0 -> (x- || y-)
          ];
          [~A0 & ~A1 & ~B0 & ~B1 & ~Sign1 & ~Sign0]; en+ ]
endprocess

process A;
*[[ true -> A0+ | true -> A1+]; [~en]; [ A0 -> A0- | A1 -> A1- ]; [en]]
endprocess

process B;
*[[ true -> B0+ | true -> B1+]; [~en]; [ B0 -> B0- | B1 -> B1- ]; [en]]
endprocess

process Sign;
*[[ true -> Sign0+ | true -> Sign1+]; [~en]; 
	[ Sign0 -> Sign0- | Sign1 -> Sign1- ]; [en]]
endprocess

process C;
*[ Ce+; [C0 | C1]; Ce-; [~C0 & ~C1] ]
endprocess

process S;
*[ Se+; [S0 | S1]; Se-; [~S0 & ~S1] ]
endprocess
endmodule
