/***************************************************************************
 ** file: pchpASE.hse--Precharged half-buffer Align Shift Unit             
 **
 ** Center for Asynchronous Circuit and System Design (c)opyright 1999
 **
 ** Description:
 **
 ** This is the shift element that replaces the barrel shifter in align.
 ** The circuit relies on a control unit to communicate with the low-order
 ** bit that tells the low-order bit to shift right and grab left or 
 ** output its value.  The low-order bit then ripples the communications 
 ** from the controller up into the high-order bits. The behavior of the 
 ** circuit can be quantified with the following conditional clauses:
 **
 **      * If mantissa is ready and you are done (no shift) output the
 **        manitssa value immediately.
 **      * If the mantissa is ready and you need to shift, output the
 **        manitssa value on the right port and request a new value
 **        from the left port.
 **      * If the left values comes in with another shift, dump the bit 
 **        to the right and pass the shift call to the left.
 **      * If the left request returns and you see the done signal, output
 **        your current bit and pass the done signal to the left.
 **
 ** The port description of the ASE is as shown
 **
 **                ----------
 **               |          |
 **     Mi ------>|          |------> Oi
 **    Men <------|          |<------ Oen
 **               |          |
 **     Li ------>|          |------> Ri
 **    Len <------|          |<------ Ren
 **               |          |
 **     SL <------|          |<------ SR
 **     DL <------|          |<------ DR
 **   CLen ------>|   ASE    |------> CRen 
 **               |          |
 **                ---------- 
 **
 ** The circuit is synthesized using the following ATACs command
 ** atacs -mz -mV -mU -mP -mT -ms -mS -mc -mX -mO -mF -lh -ya ase.hse
 **
 **

***************************************************************************/

module pchbASE;

  /* 
   * The delays here are not set the actual delays seen by the 
   * process that we are using.  This will need to be changed before
   * the final circuit is verified as correct.
   */
  delay onegate  = <90,110>;            /* Delay of single gate */
  delay twogate  = <180,220>;           /* Delay of larger gate */
  delay envdelay = <180,inf>;   /* General environment delay */

  input  SR   = { false, envdelay };
  input  DR   = { false, envdelay };
  output CRen = { true, onegate };

  output SL   = { false, onegate };
  output DL   = { false, onegate };
  input  CLen = { false, envdelay };

  input  M0   = { false, envdelay };
  input  M1   = { false, envdelay };
  output Men  = { true, onegate };

  output O0   = { false, onegate };
  output O1   = { false, onegate };
  input  Oen  = { false, envdelay };

  input  L0   = { false, envdelay };
  input  L1   = { false, envdelay };
  output Len  = { true, onegate };

  output R0   = { false, onegate };
  output R1   = { false, onegate };
  input  Ren  = { false, envdelay };

  output CSC  = { false, onegate };

  process compute;
   *[
      [Oen & CLen & Ren] ;
      [  ( M0 & SR ) -> 

              R0+; SL+; (Men- || CRen- || CSC+); [~Ren & ~CLen]; 
              ( R0- || SL- ); [~M0 & ~M1 & ~SR & ~DR]; CRen+;
              
                [ ( SR & Ren & L0 ) -> [CLen]; 

                    ( ( R0+ || SL+ ) ; Len-; CRen-; [~Ren & ~CLen]; 
                      ( R0- || SL- ) ; [~L0 & ~L1 & ~SR & ~DR ] ; 
                      ( Len+ || CRen+ ) ) ; *

                | ( SR & Ren & L1 ) -> [CLen]; 

                    ( ( R1+ || SL+ ) ; Len-; CRen-; [~Ren & ~CLen]; 
                      ( R1- || SL- ) ; [~L0 & ~L1 & ~SR & ~DR ] ; 
                      ( Len+ || CRen+ ) ) ; *
 
                | ( DR & Oen & L0 ) -> [CLen]; 

		    ( O0+ || DL+ ) ; Len-; (CRen- || CSC-);
                    [~Oen & ~CLen] ; ( O0- || DL- ) ; 
                    [~L0 & ~L1 & ~DR & ~SR] ; ( Len+ || CRen+ )

                | ( DR & Oen & L1 ) -> [CLen]; 

		    ( O1+ || DL+ ) ; Len-; (CRen- || CSC-);
                    [~Oen & ~CLen] ; ( O1- || DL- ) ; 
                    [~L0 & ~L1 & ~DR & ~SR] ; ( Len+ || CRen+ )

              ]
        | ( M1 & SR ) -> 

              R1+; SL+; (Men- || CRen- || CSC+); [~Ren & ~CLen]; 
              ( R1- || SL-); [~M0 & ~M1 & ~SR & ~DR]; CRen+;

              [ ( SR & Ren & L0 ) -> [CLen]; 

                    ( ( R0+ || SL+ ) ; Len-; CRen-; [~Ren & ~CLen]; 
                      ( R0- || SL- ) ; [~L0 & ~L1 & ~SR & ~DR ] ; 
                      ( Len+ || CRen+ ) ) ; *

                | ( SR & Ren & L1 ) -> [CLen];  

                    ( ( R1+ || SL+ ) ; Len-; CRen-; [~Ren & ~CLen]; 
                      ( R1- || SL- ) ; [~L0 & ~L1 & ~SR & ~DR ] ; 
                      ( Len+ || CRen+ ) ) ; *

                | ( DR & Oen & L0 ) -> [CLen]; 
		    ( O0+ || DL+ ) ; Len-; (CRen- || CSC-); 
                    [~Oen & ~CLen] ; ( O0- || DL- ) ; 
                    [~L0 & ~L1 & ~DR & ~SR] ; ( Len+ || CRen+ )

                | ( DR & Oen & L1 ) -> [CLen]; 
		    ( O1+ || DL+ ); Len-; (CRen- || CSC-); 
                    [~Oen & ~CLen] ; ( O1- || DL- ) ; 
                    [~L0 & ~L1 & ~DR & ~SR] ; ( Len+ || CRen+ )

                  /**( O1+ ; Len- ; [~Oen] ; O1- ; [~L0 & ~L1] ; Len+ ) ||
                   **( DL+ ; ( CRen- || CSC- ) ; [~CLen] ; DL- ; [~DR & ~SR] ; 
                   ** CRen+ )
                   **/
              ]
        | ( M0 & DR ) -> 
            ( O0+ ; Men- ; [~Oen] ; O0- ) ||
            ( DL+ ; CRen- ; [~CLen] ; DL- ; [~DR & ~SR & ~M0 & ~M1] ; CRen+ )
        | ( M1 & DR ) -> 
            ( O1+ ; Men- ; [~Oen] ; O1- ) ||
            ( DL+ ; CRen- ; [~CLen] ; DL- ; [~DR & ~SR & ~M0 & ~M1] ; CRen+ )
      ] ;
      Men+
    ]

  endprocess

  process mantissa;
   *[
      [ true -> M0+ | true -> M1+ ];
      [~Men];
      [ M0 -> M0- | M1 -> M1- ];
      [Men]
    ]
  endprocess

  process rightdata;
   *[
      Ren+ ; [R0 | R1] ; Ren- ; [~R0 & ~R1]
    ]
  endprocess

  process rightcontrol;
   *[
      [ true -> SR+ | true -> DR+ ];
      [~CRen];
      [ SR -> SR- | DR -> DR- ];
      [CRen]
    ]
  endprocess

  process leftcontrol;
   *[
      CLen+ ; [DL | SL] ; CLen- ; [~DL & ~SL]
    ]
  endprocess

  process leftdata;
   *[
      [ true -> L0+ | true -> L1+ ];
      [~Len];
      [ L0 -> L0- | L1 -> L1- ];
      [Len]
    ]
  endprocess

  process outdata;
   *[
      Oen+ ; [O0 | O1] ; Oen- ; [~O0 & ~O1]
    ]
  endprocess

endmodule


