module mul2b;

input m2done = {<2,3;6,7>};
output m2prech = {true,<0,1>};

input start = {<1,2>}; 
input EndP = {<0,2>};
input A1M = {<2,3;1,3>};
input A2M = {<2,3;1,3>};
input M1A = {<2,3;6,7>};
output M2A2 = {<0,1>};
input done = {<0,1>};
input C = {<0,1>};
input x = {<0,1>};
input y = {<0,1>};

process alu1;
    *[ A1M+; [M1A+]; A1M-; [M1A-] ]
endprocess	

process alu2;
    *[ [start+]; C+;
	[ skip -> A2M+; [M2A2+ & M1A+]; C-; A2M-; [M2A2- & M1A-]; C+; *
        | skip -> EndP+
	]; [start-]; C-; EndP-
     ]
endprocess

process mul1;
    *[[ A1M+ & A2M+ -> M1A+; [A1M-]; [A2M-]; M1A-
      | EndP+ -> x+; x-
     ]]
endprocess

process mul2;
    *[[ A1M+ & A2M+ -> m2prech-; [m2done+]; (M2A2+ || m2prech+); 
	                 [A1M- & A2M- & m2done-]; M2A2-
      | EndP+ -> y+; y- ]]
endprocess

process celem;
    *[ [EndP+/* & A1M+*/]; done+; [EndP-/* & A1M-*/]; done- ]
endprocess

process env;
    *[ start+; [done+]; start-; [done-] ]
endprocess

process m2;
    *[ [m2prech-]; m2done+; [m2prech+]; m2done-]
endprocess
endmodule
