
/*  pre-charge half buffer 2 to 1 mux with ripple select
 **
 ** command line: atacs -mc -mV -mX -mU -mP -mT -ms -mD -ya m21.hse
 **
 ** 
 ** Description:  Sin 0 selects A, Sin 1 selects B
 **               Sout matches Sin
 **
 **  Sin  A   B  |  C   Sout
 ** ------------------------
 **   0   0   -  |  0    0
 **   0   1   -  |  1    0
 **   1   -   0  |  0    1
 **   1   -   1  |  1    1
 **
 **
 **                           Ai   Bi   en
 **                            |    |   ^
 **                            |    |   |
 **                            v    v   |
 **                          --------------
 **                          \            /
 **               Sini ------>\  MUX 2-1 /------> Souti
 **              SinEn <-------\        /<------- SoutEn
 **                             \      /
 **                              ------
 **                               |  ^
 **                               |  |
 **                               v  |
 **                              Ci  Cen
 **
 */

module m21;

delay onegate =  < 90, 110 >;
delay twogate =  < 180, 220 >;
delay envdelay = < 180, 220; 180, 220 >;

input A0  = { false, envdelay };
input A1  = { false, envdelay };
input B0  = { false, envdelay };
input B1  = { false, envdelay };
output en = { true,  onegate };

input Sin0 = { false, envdelay };
input Sin1 = { false, envdelay };
output SinEn = { true,  onegate };

input Cen = { false, envdelay };
output C0 = { false, onegate };
output C1 = { false, onegate };

input SoutEn = { false, envdelay };
output Sout0 = { false, onegate };
output Sout1 = { false, onegate };

process main;
*[  (   (  ( [Cen] || [SoutEn] );
           [   Sin0 & A0 -> C0+ || [ B0 | B1 ]
             | Sin0 & A1 -> C1+ || [ B0 | B1 ]
             | Sin1 & B0 -> C0+ || [ A0 | A1 ] 
             | Sin1 & B1 -> C1+ || [ A0 | A1 ] 
           ];
           en-;
           ( [~Cen] || [~SoutEn] );
           [ C0 -> C0- | C1 -> C1- ];
           [ ~A0 & ~A1 & ~B0 & ~B1 ];
           en+ 
        )
     || (  ( [SoutEn] || [Cen] );
           [   Sin0 -> Sout0+
             | Sin1 -> Sout1+
           ];
           SinEn-;
           ( [~SoutEn] || [~Cen] );
           [ Sout0 -> Sout0- | Sout1 -> Sout1- ];
           [ ~Sin0 & ~Sin1 ];
           SinEn+ 
        )
    )
 ]
endprocess

process Sin;
*[ [ true -> Sin0+ | true -> Sin1+]; 
   [~SinEn]; 
   [ Sin0 -> Sin0- | Sin1 -> Sin1- ]; 
   [SinEn]
 ]
endprocess

process A;
*[ [ true -> A0+ | true -> A1+ ]; 
   [~en]; 
   [ A0 -> A0- | A1 -> A1- ]; 
   [en]
 ]
endprocess

process B;
*[ [ true -> B0+ | true -> B1+ ]; 
   [~en]; 
   [ B0 -> B0- | B1 -> B1- ]; 
   [en]
 ]
endprocess

process C;
*[ Cen+; 
   [ C0 | C1 ]; 
   Cen-; 
   [ ~C0 & ~C1 ] 
 ]
endprocess

process Sout;
*[ SoutEn+; 
   [ Sout0 | Sout1 ]; 
   SoutEn-; 
   [ ~Sout0 & ~Sout1 ] 
 ]
endprocess

endmodule

